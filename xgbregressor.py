# -*- coding: utf-8 -*-
"""XGBRegressor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NhH22rXrguz0X7Lpw0ZjGZxB6oJ_xoYR

# Train

## Import Lib & Read CSV
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
pd.options.mode.chained_assignment = None
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor

house = pd.read_csv(r'./train.csv')

"""### 重複變數宣告"""

basic_drop = ['building_id','parking_area','parking_price']
LR = 0.09
N_Est = 30
MD = 100

"""## PreProcess
- 補 NA
- Drop Columns
"""

house = house.drop(basic_drop, axis=1)

house = house.drop(columns=['I_10000','I_index_10000','II_10000','II_index_10000','III_10000','III_index_10000','IV_10000','IV_index_10000','V_10000','V_index_10000','VI_10000','VI_index_10000','VII_10000','VII_index_10000','VIII_10000','VIII_index_10000','IX_10000','IX_index_10000','X_10000','X_index_10000','XI_10000','XI_index_10000','XII_10000','XII_index_10000','XIII_10000','XIII_index_10000','XIV_10000','XIV_index_10000'], axis=1)

#house.txn_floor.fillna(0, inplace = True)
house.txn_floor.fillna(house["total_floor"], inplace=True)

house.village_income_median.fillna(house["village_income_median"].mean(), inplace=True)

"""## Model

### 定義X Y
"""

X = house.loc[:, house.columns != 'total_price']
y = house['total_price']

"""### 切資料集"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)

"""### 選擇模型 & Fit"""

xgbr = XGBRegressor(learning_rate=LR,n_estimators=N_Est,max_depth=MD)

xgbr.fit(X_train, y_train)

print('The accuracy of eXtreme Gradient Boosting Regressor on testing set:', xgbr.score(X_test, y_test))

"""### 從驗證結果篩選過濾較不重要的欄位"""

feats = {}
badfeats = []
badfeats.clear()
imp_data = pd.DataFrame()
for feature, importance in zip(house.columns, xgbr.feature_importances_):
    if importance > 0:
        print("feature:{f}--------> {imp}".format( f = feature, imp = importance ))
    else:
        badfeats.append(feature)

house.drop(badfeats, axis=1, inplace=True)

"""### 重新定義Training X Y 並 Fit Model"""

X = house.loc[:, house.columns != 'total_price']
y = house['total_price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)

xgbr = XGBRegressor(learning_rate=LR,n_estimators=N_Est,max_depth=MD)

xgbr.fit(X_train, y_train)

print('The accuracy of eXtreme Gradient Boosting Regressor on testing set:', xgbr.score(X_test, y_test))

"""# Test"""

house_test = pd.read_csv(r'./test.csv')

"""### 依照訓練的資料處理作業一次"""

house_test = house_test.drop(basic_drop, axis=1)

house_test = house_test.drop(columns=['I_10000','I_index_10000','II_10000','II_index_10000','III_10000','III_index_10000','IV_10000','IV_index_10000','V_10000','V_index_10000','VI_10000','VI_index_10000','VII_10000','VII_index_10000','VIII_10000','VIII_index_10000','IX_10000','IX_index_10000','X_10000','X_index_10000','XI_10000','XI_index_10000','XII_10000','XII_index_10000','XIII_10000','XIII_index_10000','XIV_10000','XIV_index_10000'], axis=1)

house_test.txn_floor.fillna(house_test["total_floor"], inplace=True)

house_test.village_income_median.fillna(house_test["village_income_median"].mean(), inplace=True)

house_test.drop(badfeats, axis=1, inplace=True)

"""### 測試模型"""

Test_pred = xgbr.predict(house_test)
Test_pred

submit_test = pd.read_csv(r'./submit_test_ori.csv')

submit_test.total_price = pd.Series(Test_pred)

submit_test.to_csv(r'./submit_test.csv',index=False)

